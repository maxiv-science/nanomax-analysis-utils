"""
A live viewer app which grabs data from Lima and plots them in a silx 
widget, either as 2d images or as spectra.
"""

# to do:
#   limits of histograms are not right, set image limits perhaps
#   don't reset zoom when updating
#   some way to avoid reading the same image more than once?

try:
    import PyTango
except ModuleNotFoundError:
    print('PyTango not imported')
import sys
import numpy as np
from silx.gui.plot import ImageView, PlotWindow, tools
from silx.gui import qt


class DummyLimaDevice(object):
    def __init__(self, dim='2d'):
        self.acq_expo_time = 1.0
        self.last_image_ready = 1
        if dim == '2d':
            self.w = self.h = 50
            self.image_sizes = (-1, 4, self.w, self.h)
        elif dim == '1d':
            self.w = 100
            self.h = 4
            self.image_sizes = (-1, 4, self.w, self.h)
        else:
            raise ValueError

    def getImage(self, idx):
        # strange number so that an alarm will occasionally happen:
        return (np.random.random(self.w * self.h) * 255.005).astype(np.int32)

class LimaLiveViewer2D(ImageView):
    """
    Displays 2d detector images live from Lima.

    alarm is the maximum photon flux per pixel allowed.
    """

    def __init__(self, limaPath, interval=.1, alarm=None):
        # run the base class constructor
        super(LimaLiveViewer2D, self).__init__()

        # initialize the lima proxy
        if limaPath:
            self.lima = PyTango.DeviceProxy(limaPath)
        else:
            self.lima = DummyLimaDevice('2d')
        ignore, bytes, self.w, self.h = self.lima.image_sizes
        self.dtype = {1: np.int8, 2: np.int16, 4:np.int32}[bytes]

        # set some properties
        self.setWindowTitle(limaPath)
        self.setKeepDataAspectRatio(True)
        self.setColormap(normalization='log')
        self.setYAxisInverted(True)
        self.hasImage = False
        self.alarm = alarm

        # a periodic timer triggers the update
        self.timer = qt.QTimer(self)
        self.timer.setInterval(interval * 1000.0)
        self.timer.timeout.connect(self._update)
        self.timer.start()

        # Display mouseover position info
        posInfo = [
            ('X', lambda x, y: int(x)),
            ('Y', lambda x, y: int(y)),
            ('Data', self._getActiveImageValue)]
        self._positionWidget = tools.PositionInfo(plot=self, converters=posInfo)
        self.statusBar().addWidget(self._positionWidget)

    def _update(self):
        """
        gets and plots the last image
        """
        last = self.lima.last_image_ready
        if last > -1:
            try:
                image = np.frombuffer(self.lima.getImage(last), dtype=self.dtype)
                image = image.reshape((self.h, self.w))
                self.setImage(image, copy=False, reset=(not self.hasImage))
                self.hasImage = True
                total = np.sum(image)
                hottest = np.max(image)
                exptime = self.lima.acq_expo_time
                if (self.alarm is not None) and (hottest/exptime > self.alarm):
                    self.setBackgroundColor(qt.QColor(255, 0, 0))
                else:
                    self.setBackgroundColor(qt.QColor(255, 255, 255))
                self.setGraphTitle('Total: %.1e (%.1e / s) \n Hottest: %.1e (%.1e / s)' % (total, total/exptime, hottest, hottest/exptime))
                self._positionWidget.updateInfo()
            except:
                pass # sometimes you miss frames, no big deal

    def _getActiveImageValue(self, x, y):
        """
        Get value of active image at position (x, y)
        """
        image = self.getActiveImage()
        if image is not None:
            data, params = image[0], image[4]
            ox, oy = params['origin']
            sx, sy = params['scale']
            if (y - oy) >= 0 and (x - ox) >= 0:
                # Test positive before cast otherwisr issue with int(-0.5) = 0
                row = int((y - oy) / sy)
                col = int((x - ox) / sx)
                if (row < data.shape[0] and col < data.shape[1]):
                    return data[row, col]
        return '-'


class LimaLiveViewer1D(PlotWindow):
    """
    Displays a stack of 1D spectra live from Lima.
    """

    def __init__(self, limaPath, interval=.1, alarm=None, truncate=None):
        # run the base class constructor
        super(LimaLiveViewer1D, self).__init__()

        # initialize the lima proxy
        if limaPath:
            self.lima = PyTango.DeviceProxy(limaPath)
        else:
            self.lima = DummyLimaDevice('1d')
        ignore, bytes, self.n, self.N = self.lima.image_sizes
        self.dtype = {1: np.int8, 2: np.int16, 4:np.int32}[bytes]

        # determine the x axis, in future perhaps a calibrated scale
        self.E = np.arange(self.n)

        # set some properties
        self.setWindowTitle(limaPath)
        self.hasData = False
        self.truncate = truncate
        if alarm is not None:
            raise NotImplementedError

        # a periodic timer triggers the update
        self.timer = qt.QTimer(self)
        self.timer.setInterval(interval * 1000.0)
        self.timer.timeout.connect(self._update)
        self.timer.start()

    def _update(self):
        """
        gets and plots the last spectra
        """
        last = self.lima.last_image_ready
        if last > -1:
            try:
                data = np.frombuffer(self.lima.getImage(last), dtype=self.dtype)
                data = data.reshape((self.N, self.n))
                if self.truncate:
                    data = data[:, :self.truncate]
                    self.E = self.E[:self.truncate]
                sums = []
                exptime = self.lima.acq_expo_time
                for i in range(self.N):
                    self.addCurve(self.E, data[i, :], legend=str(i), resetzoom=(not self.hasData))
                    self.hasData = True
                    sums.append(np.sum(data[i, :]))
                self.setGraphTitle('max(Channels 0,1,2): %.1e (%.1e / s)\nChannel 3: %.1e (%.1e / s)' % (np.max(sums[0:3]), np.max(sums[0:3])/exptime, sums[3], sums[3]/exptime))
            except:
                pass # sometimes you miss frames, no big deal


if __name__ == '__main__':
    # you always need a qt app     
    app = qt.QApplication(sys.argv)
    app.setStyle('Fusion')

    # a dict of known detectors for convenience
    known = {
        'pil100k': 'lima/limaccd/b-nanomax-mobile-ipc-01',
        'pil1m': 'lima/limaccd/b-nanomax-pilatus1m-ipc-01',
        'merlin': 'lima/limaccd/b303a-a100384-dia-detpicu-02',
        'eiger': 'lima/limaccds/eiger',
        'xspress3': 'lima/limaccd/b303a-a100380-dia-detxfcu-01',
        'dummy': 'dry run'
    }

    # alarm levels in photons per pixel per second
    alarm_levels = {
        'lima/limaccd/b-nanomax-mobile-ipc-01': 5e6,
        'lima/limaccd/lima/limaccd/b-nanomax-pilatus1m-ipc-01': 5e6,
        'lima/limaccd/test_merlin': 1e5,
        None: 254,
        }
    
    # parse arguments
    try:
        kwargs = {}
        if sys.argv[1] == 'dummy':
            limaPath = None
        else:
            limaPath = known[sys.argv[1]] if sys.argv[1] in known.keys() else sys.argv[1] # parse shortcuts
        alarm = alarm_levels[limaPath] if limaPath in alarm_levels.keys() else None
        Viewer = LimaLiveViewer2D   # default
        interval = 0.1              # default
        if (len(sys.argv) >= 3 and sys.argv[2].lower() == '1d') or ('xfcu' in str(limaPath)):
            Viewer = LimaLiveViewer1D
            kwargs['truncate'] = 4096
        if len(sys.argv) >= 4:
            interval = float(sys.argv[3])
    except:
        print("\nUsage: python limaLiveViewer.py <lima device> [<det type> <polling interval>]\n")
        print("   <lima device>       full lima path or one of these shortcuts:")
        for key, val in known.items():
            print(" "*26 + "%-10s (%s)"%(key, val))
        print("   <detector type>     1d or 2d, defaults to 2d")
        print("   <polling interval>  interval with which to check for new images, defaults to 0.1\n\n")
        exit(0)

    # instantiate the viewer and run
    viewer = Viewer(limaPath, interval=interval, alarm=alarm, **kwargs)
    viewer.show()
    app.exec_()
